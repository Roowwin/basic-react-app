{"ast":null,"code":"import{GET_ARTICLE_LIST,GET_ARTICLE_LIST_ERR,NEWS_LOADER,GET_AD_LIST,GET_AD_LIST_ERR,AD_LOADER}from\"../types\";import axios from'axios';export var getArticleList=function getArticleList(){var skip=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;return function(dispatch){dispatch(newsLoader());axios.get('/api/article/list',{headers:{skip:skip,limit:limit}}).then(function(res){dispatch({type:GET_ARTICLE_LIST,payload:res.data});}).catch(function(err){return dispatch({type:GET_ARTICLE_LIST_ERR,payload:err.response});});};};var newsLoader=function newsLoader(){var val=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;return{type:NEWS_LOADER,payload:null};};export var getAdveritsementList=function getAdveritsementList(){return function(dispatch){dispatch(addLoader());axios.get('/api/article/list').then(function(res){dispatch({type:GET_AD_LIST,payload:res.data});}).catch(function(err){return dispatch({type:GET_AD_LIST_ERR,payload:err.response});});};};var addLoader=function addLoader(){var val=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;return{type:AD_LOADER,payload:null};};","map":{"version":3,"sources":["/Volumes/Drive D/Creative Projecty/newspapper/client/src/redux/actions/apicall.js"],"names":["GET_ARTICLE_LIST","GET_ARTICLE_LIST_ERR","NEWS_LOADER","GET_AD_LIST","GET_AD_LIST_ERR","AD_LOADER","axios","getArticleList","skip","limit","dispatch","newsLoader","get","headers","then","res","type","payload","data","catch","err","response","val","getAdveritsementList","addLoader"],"mappings":"AAAA,OACIA,gBADJ,CAEIC,oBAFJ,CAGIC,WAHJ,CAIIC,WAJJ,CAKEC,eALF,CAMEC,SANF,KAQO,UARP,CAYA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAOA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAACC,CAAAA,IAAD,2DAAO,CAAP,IAAWC,CAAAA,KAAX,2DAAiB,CAAjB,OAAuB,UAAAC,QAAQ,CAAI,CAC7DA,QAAQ,CAACC,UAAU,EAAX,CAAR,CACAL,KAAK,CACFM,GADH,CACO,mBADP,CAEE,CACEC,OAAO,CAAC,CACNL,IAAI,CAACA,IADC,CAENC,KAAK,CAACA,KAFA,CADV,CAFF,EASGK,IATH,CASQ,SAAAC,GAAG,CAAI,CAEXL,QAAQ,CAAC,CACPM,IAAI,CAAEhB,gBADC,CAEPiB,OAAO,CAAEF,GAAG,CAACG,IAFN,CAAD,CAAR,CAKD,CAhBH,EAiBGC,KAjBH,CAiBS,SAAAC,GAAG,QACRV,CAAAA,QAAQ,CAAC,CACPM,IAAI,CAACf,oBADE,CAEPgB,OAAO,CAAEG,GAAG,CAACC,QAFN,CAAD,CADA,EAjBZ,EAuBD,CAzB2B,EAAvB,CA2BP,GAAMV,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAc,IAAbW,CAAAA,GAAa,2DAAP,IAAO,CAC7B,MAAO,CACHN,IAAI,CAACd,WADF,CAEHe,OAAO,CAAC,IAFL,CAAP,CAIH,CALD,CAMA,MAAO,IAAMM,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,SAAM,UAAAb,QAAQ,CAAI,CAClDA,QAAQ,CAACc,SAAS,EAAV,CAAR,CACAlB,KAAK,CACFM,GADH,CACO,mBADP,EAEGE,IAFH,CAEQ,SAAAC,GAAG,CAAI,CAEXL,QAAQ,CAAC,CACPM,IAAI,CAAEb,WADC,CAEPc,OAAO,CAAEF,GAAG,CAACG,IAFN,CAAD,CAAR,CAKD,CATH,EAUGC,KAVH,CAUS,SAAAC,GAAG,QACRV,CAAAA,QAAQ,CAAC,CACPM,IAAI,CAACZ,eADE,CAEPa,OAAO,CAAEG,GAAG,CAACC,QAFN,CAAD,CADA,EAVZ,EAgBD,CAlBiC,EAA7B,CAoBP,GAAMG,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAc,IAAbF,CAAAA,GAAa,2DAAP,IAAO,CAC5B,MAAO,CACHN,IAAI,CAACX,SADF,CAEHY,OAAO,CAAC,IAFL,CAAP,CAIH,CALD","sourcesContent":["import {\n    GET_ARTICLE_LIST, \n    GET_ARTICLE_LIST_ERR, \n    NEWS_LOADER,\n    GET_AD_LIST ,\n  GET_AD_LIST_ERR ,\n  AD_LOADER\n   \n} from \"../types\";\n\n\n\nimport axios from 'axios';\n\n\n\n\n\n\nexport const getArticleList = (skip =0 , limit=4) => dispatch => {\n    dispatch(newsLoader());\n    axios\n      .get('/api/article/list' , \n      {\n        headers:{\n          skip:skip , \n          limit:limit\n        }\n      },\n      )\n      .then(res => {\n       \n        dispatch({\n          type: GET_ARTICLE_LIST,\n          payload: res.data\n        });\n       \n      })\n      .catch(err =>\n        dispatch({\n          type:GET_ARTICLE_LIST_ERR ,\n          payload: err.response\n        })\n      );\n  }\n\nconst newsLoader = (val = null)=>{\n    return { \n        type:NEWS_LOADER, \n        payload:null\n    }\n}\nexport const getAdveritsementList = () => dispatch => {\n    dispatch(addLoader());\n    axios\n      .get('/api/article/list' )\n      .then(res => {\n       \n        dispatch({\n          type: GET_AD_LIST,\n          payload: res.data\n        });\n       \n      })\n      .catch(err =>\n        dispatch({\n          type:GET_AD_LIST_ERR ,\n          payload: err.response\n        })\n      );\n  }\n\nconst addLoader = (val = null)=>{\n    return { \n        type:AD_LOADER, \n        payload:null\n    }\n}"]},"metadata":{},"sourceType":"module"}